=====================
Installing MDAnalysis
=====================

Requirements
============

Currently MDAnalysis is only distributed in source form. In order to
build the library some C and C++ code needs to be compiled. Thus you will need

    * python (>=2.4)
    * a C and a C++ compiler (e.g. gcc or Intel icc),
    * the python header files (typically in a package python-dev),
    * numpy and pyrex to compile the DCD reader and numerical extensions,
    * a LAPACK library (standard LAPACK/BLAS, ATLAS, or the Intel Math
      Kernel Library (MKL); on Mac OS X we simply use the native fast
      vecLib framework so you don't have to install anything else).

See *Additional non-standard packages* below for what else you need at
run time.

The source code can be obtained from the SVN repository. The primary
dependency is numpy, although pylab is a useful addition to plot
analyses generated with MDAnalysis. 


Getting the source 
==================

Download a tar ball from
http://code.google.com/p/mdanalysis/downloads/list ; these
instructions apply to versions 0.6.0-rc2 or higher.

Alternatively, check out the MDAnalysis directory from the SVN
repository at http://mdanalysis.googlecode.com. See the source
checkout instructions for details
(http://code.google.com/p/mdanalysis/source/checkout). In most cases
simply do ::

  svn checkout http://mdanalysis.googlecode.com/svn/trunk/ MDAnalysis
  cd MDAnalysis



Installation from source
========================

Currently MDAnalysis is only distributed in source form. You will need
a C compiler and pyrex to compile the DCD reader and numerical
extensions.

In the top directory, you can customize the setup by copying the setup
configuration template to setup.cfg and editing it.::

   cp setup.cfg.template setup.cfg

For instance, you can choose to use the Intel compiler for faster
code if you have it installed or you can add paths to the Intel
Math Kernel (MKL) libraries. However, this is not required and
everything should work without touching setup.cfg or
setup.cfg.template; if you have problem first try installing with
defaults (i.e. without using setup.cfg at all).


In principle, installation should be as simple as ::

   python setup.py build
   python setup.py install

This installs MDAnalysis in the system wide python directory; this may
require administrative privileges.

It is also possible to use --prefix, --home, or --user options for
setup.py to install in a different (probably your private) python
directory hierarchy.

If you have problem at this stage then have a look at the operating
system specific notes at the end of this file or look in the issue
tracker --- maybe the problem is recognized and a work around can be
found in the comments


Fast math libraries
-------------------

On Mac OS X we use the systems vecLib for fast linear algebra and
nothing needs to be configured. On Linux you will probably want to use
something such as ATLAS or the Intel Math Kernel Libraries for better
performance for the rms fitting.

The fast math library paths are set in ``setup.cfg``. See the example
in the template and below.

To get an idea if you have lapack libraries installed, run

  locate lapack

and look for 'liblapack.a' or 'liblapack.so'. Also ask your package
management system.


Example MKL
~~~~~~~~~~~

Linux section of setup.cfg (your paths are probably different from the
ones in this example)::

  [linux]
  fast_numeric_include = /opt/intel/cmkl/10.0.5.025/include
  fast_numeric_linkpath = /opt/intel/cmkl/10.0.5.025/lib/em64t
  fast_numeric_libs = mkl_lapack mkl guide

Example ATLAS LAPACK
~~~~~~~~~~~~~~~~~~~~

If you want to use the ATLAS LAPACK libraries use something such as ::

  [linux]
  fast_numeric_include = /usr/include
  fast_numeric_linkpath = /usr/lib/atlas
  fast_numeric_libs = lapack

or 

  [linux]
  fast_numeric_include = /usr/include
  fast_numeric_linkpath = /usr/lib/sse2/atlas
  fast_numeric_libs = lapack


Selecting an installation directory
-----------------------------------

In order to install in a non-default directory one can use various
options to setup (see --help) such as ::

 python setup.py install --prefix LOCAL_DIRECTORY

or any of the other options of distutil's setup.py to install in
alternative directories, for instance

 python setup.py install --user



Easy Install
------------

We are also exploring the use of easy_install. This is experimental
but you might be able to do ::

  easy_install [options] ./mdanalysis
 
A developer installation (that immediately reflects changes to the
sources) with ::

  cd ./mdanalysis
  python setup develop [options]


If you want to use optional functionality (such as running some of the
analysis code in the MDAnalysis.analysis module or running the test
suite) then you can have easy_install fetch and install additionaly
required packages if you have not been able to install them through
your package manager (always preferred!). For instance,

  easy_install ./mdanalysis[analysis]

should also install packages required for analysis.



Additional non-standard python packages
=======================================

See the operating system specific notes above for hints how to get the
necessary packages through the native package management
system. Please add your own (eg for RPM based systems which the
developers are not using heavily).

python-dev includes Python.h, which is required for compiling. numpy
is used at the compilation stage to find maths libraries. scipy and
biopython are only needed when one wants to use all MDAnalysis
functions but are not required for compiling.

Required python packages
------------------------

In order to use the library in your own python code you will need at least

    * numpy of version 1.0.3 or greater (http://numpy.scipy.org/)
    * BioPython's Bio.PDB (http://biopython.org)

Optional python packages:

    * networkx (http://networkx.lanl.gov/) --- for analysis of lipid 
      leaflets via MDAnalysis.analysis.leaflet
    * nose (http://somethingaboutorange.com/mrl/projects/nose/) -- for testing
    * ScientificPython http://dirac.cnrs-orleans.fr/plone/software/scientificpython/
      Scientific.IO.FortranFormat (experimental LAMMPS parser)


OS specific notes
=================

Linux
-----

* The GNU gcc compiler is the default and should be used
  automatically; in particular you will not have to do anything with
  setup.cfg. This should work if you have no file named setup.cfg in
  your MDAnalysis directory. (If you want to use setup.cfg and use GNU
  gcc simply comment out the compiler=intel line in the template:
   # compiler=intel

* To compile with the Intel compilers, set in setup.cfg ::

    [build]
    compiler=intel

  and install the Math Kernel Libraries (MKL). You will have to add
  the 'fast_numeric_*' paths in setup.cfg  under the [linux] section;
  see the template for examples.

  (Although, in some instances the KDTree does not compile with
  Intel. In this case please file a bug and use gcc in the mean time.)

* RMS fitting requires a linear algebra library. If you get ::
 
    ImportError: MDAnalysis/core/rms_fitting.so: undefined symbol: dsyev_

  then install any LAPACK library and install again. 
 
     1. Install any LAPACK, eg ATLAS/LAPACK. On Ubuntu I can do

            sudo aptitude install liblapack-dev

        This installs liblapack.a; if your library is named
        differently then you will need to use the library name
        (without initial 'lib') instead of lapack.

     2. Make sure that the library name is added to a linker line
        during setup. If it is "lapack" (the default) then you don't
        have to do anything. If it is different (e.g. "lapack-3") then
        you have to use ``setup.cfg`` as described above. For
        "liblapack-3.a" in "/usr/lib" you would have the lines ::

  	  fast_numeric_include =
	  fast_numeric_linkpath = /usr/lib
	  fast_numeric_libs = lapack-3

       (Note that the include list can stay empty when the header
       files are in a standard location such as /usr/include; this is
       the case with the aptitude package installation.)

* Install prerequisite packages on Ubuntu or Debian with

    sudo aptitude install python-dev python-pyrex python-numpy g++
    sudo aptitude install liblapack-dev   # also see notes on fast_numeric_*

  Install packages needed for full functionality

    sudo aptitude install python-scipy python-matplotlib python-biopython




Mac OS X
--------
OS specific notes


* Tested with Mac OS X 10.4.11+fink and 10.6.2+MacPorts. 

  The RMS-fitting code uses the fast vecLib framework for linear
  algebra (this is part of Mac OS X).

* fink hints:
  Install prerequisite packages using fink::

     fink install pyrex-py25 scipy-core-py25 scipy-py25

  Install packages needed for full functionality::

     fink install  matplotlib-py25 biopython-py25


